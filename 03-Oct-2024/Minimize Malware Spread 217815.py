# Problem: Minimize Malware Spread - https://leetcode.com/problems/minimize-malware-spread/

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        def find(x):
            curr = x
            while curr != parent[curr]:
                curr = parent[curr]
            
            while x != parent[x]:
                nx = parent[x]
                parent[x] = curr
                x = nx

            return curr

        def union(x, y):
            X, Y = find(x), find(y)
            if X == Y:
                return
            
            size[Y] += size[X]
            parent[X] = Y

        parent = [i for i in range(len(graph))]
        size = [1] * len(graph)
        for i in range(len(graph)):
            for j in range(i+1, len(graph[0])):
                if graph[i][j] == 1:
                    union(i, j)
        
        initial_set = set(initial)
        infected_nodes = Counter()
        for i in range(len(graph)):
            if i in initial_set:
                infected_nodes[find(i)] += 1
        
        res_node, res_size = None, float('-inf')
        initial.sort()
        for i in initial:
            if infected_nodes[find(i)] == 1 and res_size < size[find(i)]:
                res_node = i
                res_size = size[find(i)]
        
        return res_node if res_node != None else initial[0]